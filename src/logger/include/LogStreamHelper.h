/**
 * @file LogStreamHelper.h
 * @author Hugo Fernández Solís (hugofernandezsolis@gmail.com)
 * @date 2025-01-17
 * 
 * @brief 
 * 
 * @copyright Copyright (c) 2025
 */


#pragma once


#include <Logger.h>

#include <sstream>


namespace _priv_logger_ {


/*
 * LogStreamHelper types
 */
using OStreamManipulator = std::ostream& (*)(std::ostream&);


/**
 * @class LogStreamHelper
 * 
 * @brief 
 */
class LogStreamHelper {
public:
//// PUBLIC ///////////////////////////////////      CONSTRUCTORS       ////////////////////////////////////////////////
  LogStreamHelper(const LogLevel& iLevel, const std::string& iFile, const int& iLine, const std::string& iFunc);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// PUBLIC ///////////////////////////////////    GETTERS & SETTERS    ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// PUBLIC ///////////////////////////////////      CLASS METHODS      ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
//// PUBLIC ///////////////////////////////////        OPERATORS        ////////////////////////////////////////////////
  template <typename T>
  LogStreamHelper& operator<<(const T& value);

  LogStreamHelper& operator<<(OStreamManipulator manip);
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
//// PUBLIC ///////////////////////////////////       DESTRUCTORS       ////////////////////////////////////////////////
  ~LogStreamHelper();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

protected:
//// PROTECTED ////////////////////////////////      CONSTRUCTORS       ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// PROTECTED ////////////////////////////////    SETTERS & GETTERS    ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// PROTECTED ////////////////////////////////      CLASS METHODS      ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
//// PROTECTED ////////////////////////////////        OPERATORS        ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
//// PROTECTED ////////////////////////////////       DESTRUCTORS       ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

private:
//// PRIVATE //////////////////////////////////      CONSTRUCTORS       ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// PRIVATE //////////////////////////////////    SETTERS & GETTERS    ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//// PRIVATE //////////////////////////////////      CLASS METHODS      ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
//// PRIVATE //////////////////////////////////        OPERATORS        ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
//// PRIVATE //////////////////////////////////       DESTRUCTORS       ////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

private:
    LogLevel level_;
    std::string file_;
    int line_;
    std::string func_;

    std::stringstream stream_;
};


} // namespace _priv_logger_